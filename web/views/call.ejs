<!doctype html>
<html>

<head>
    <link rel="icon" href="/favicon.ico" type="image/x-icon">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>VitalChat</title>
    <style>
        body {
            font-family: Arial, Helvetica, sans-serif;
        }
        
        * {
            box-sizing: border-box
        }
    </style>
    <script src="https://cdn.pubnub.com/sdk/javascript/pubnub.4.21.7.js"></script>
</head>

<body>
    <video id="localVideo" autoplay muted></video>
    <video id="remoteVideo" autoplay></video>
</body>

<script type="text/javascript">

    var pubnubDemo = new PubNub({
        publishKey: 'pub-c-6f959cde-7073-4fa8-8ca6-d7cfabeeb78e',
        subscribeKey: 'sub-c-803adfdc-7fb4-11e9-aee4-2e27e4d79cf8'
    });

    pubnubDemo.addListener({
        message: function(message) {
            console.log(message);

            startWebRTC(message.offer).then((answer) => {
                sendAnswer(answer);
            });
        }
    });

    pubnubDemo.subscribe({
        channels: ['offer']
    });

    function sendAnswer(answer) {
        pubnubDemo.publish({
            message: {
                answer : answer
            },
            channel: 'answer'
        });
    }
</script>

<script>
    const configuration = {
        iceServers: [{
            urls: 'stun:stun.l.google.com:19302' // Google's public STUN server
        }]
    };

    function onSuccess() {};
    function onError(error) {
        console.error(error);
    };

    let pc;
    function startWebRTC(offer) {
        pc = new RTCPeerConnection(configuration);
        pc.onicecandidate = event => {
            if (event.candidate) {
                sendMessage({'candidate': event.candidate});
            }
        };
    
        pc.onaddstream = event => {
            remoteVideo.srcObject = event.stream;
        };
    
        return navigator.mediaDevices.getUserMedia({
            audio: true,
            video: true,
        }).then(stream => {

            localVideo.srcObject = stream;
            pc.addStream(stream);

            return pc.setRemoteDescription(new RTCSessionDescription(offer), () => {

                return pc.createAnswer().then((localDescCreated) => {
                    
                    return localDescCreated;
                });
            });
        });
    }
</script>
</html>